<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhusi94.github.io</id>
    <title>个人小站</title>
    <updated>2020-09-22T08:31:05.164Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhusi94.github.io"/>
    <link rel="self" href="https://zhusi94.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zhusi94.github.io/images/avatar.png</logo>
    <icon>https://zhusi94.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 个人小站</rights>
    <entry>
        <title type="html"><![CDATA[介绍下krpano]]></title>
        <id>https://zhusi94.github.io/post/jie-shao-xia-krpano/</id>
        <link href="https://zhusi94.github.io/post/jie-shao-xia-krpano/">
        </link>
        <updated>2020-09-22T07:38:32.000Z</updated>
        <content type="html"><![CDATA[<p>最近在公司在做360°全景相关的功能， 目前是买了全景相机作为硬件。<br>
前端方面选择了krpano作为框架来展示全景照片。<br>
<a href="https://krpano.com/home/">krpano</a>是一个专门用来构建全景项目工具软件，目前官方最新版本是1.20.8。<br>
官网：https://krpano.com/home/ 有全英文的最新文档，前端开发人员可直接学习文档来进行开发。 不喜欢英文的话也有一个第三方中文网站： https://krpanodoc.azurewebsites.net/docu/xml.html （貌似需要科学上网）。版本对应1.19的<br>
国内的教程网站有： http://www.krpano360.com/ 。 不过这个网站有部分内容需要收费。开发人员自行斟酌。</p>
<p>软件下载的话。官方是收费的。有兴趣研究前端360°全景展示的 请自行解决软件，这里不主动提供。<br>
推荐1.19以上的版本 新版本有exe程序可以主动搭建服务器环境，解决老版本生成的资源不能直接在谷歌浏览器里访问的问题。</p>
<p>解压后的软件包如下：<br>
<img src="https://zhusi94.github.io/post-images/1600761198775.png" alt="" loading="lazy"></p>
<p>基础的项目生成，可参照 http://www.krpano360.com/  免费教程中的内容，进行照片的分割。</p>
<p>我自己多数是多场景的应用，所以一般用 MAKE VTOUR (MULTIRES) droplet.bat 生成项目文件，将全景相机拍摄的照片，经过PS补地或其他处理后（补地教程请自行百度）拖拽（可多选拖拽）至 MAKE VTOUR (MULTIRES) droplet.bat 程序，会弹出黑窗口批处理，等程序执行完毕可在照片的目录文件夹下看到新生成的项目。<br>
<img src="https://zhusi94.github.io/post-images/1600762448944.png" alt="" loading="lazy"><br>
打开文件夹后<br>
<img src="https://zhusi94.github.io/post-images/1600762568100.png" alt="" loading="lazy"></p>
<p>可以直接将整个文件夹拷贝至服务器浏览tour.html文件，本地浏览的话，旧版本Edge可直接打开，chrome浏览器由于禁止js读取本地文件，不能直接打开。只能用krpano自己的浏览工具加载tour.xml文件。<br>
<img src="https://zhusi94.github.io/post-images/1600762789331.png" alt="" loading="lazy"><br>
双击 krpano Tools.exe 打开程序。<br>
<img src="https://zhusi94.github.io/post-images/1600762841123.png" alt="" loading="lazy"><br>
点击load tour.xml按钮，选择相应的文件路径及xml文件进行浏览。<br>
<img src="https://zhusi94.github.io/post-images/1600762931824.png" alt="" loading="lazy"></p>
<p>也可以使用<img src="https://zhusi94.github.io/post-images/1600763036387.png" alt="" loading="lazy"> krpano Testing Server.exe 程序搭建临时服务器环境，再使用谷歌或其他浏览器访问，<br>
<img src="https://zhusi94.github.io/post-images/1600763150059.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://zhusi94.github.io/post-images/1600763253376.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://zhusi94.github.io/post-images/1600763403453.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://zhusi94.github.io/post-images/1600763455187.png" alt="" loading="lazy"></figure>
<p>后续的文章，会介绍更多krpano在前端方面的使用， 敬请期待。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用echarts柱状图展示无序的录像时间统计]]></title>
        <id>https://zhusi94.github.io/post/yong-echarts-zhu-zhuang-tu-zhan-shi-wu-xu-de-lu-xiang-shi-jian-tong-ji/</id>
        <link href="https://zhusi94.github.io/post/yong-echarts-zhu-zhuang-tu-zhan-shi-wu-xu-de-lu-xiang-shi-jian-tong-ji/">
        </link>
        <updated>2020-09-22T07:15:20.000Z</updated>
        <content type="html"><![CDATA[<p>echarts的柱状图有一个叠加的功能，但只能整体一层一层叠加。<br>
业务中遇到过需要无序叠加柱状图的需求， X横轴展示录像设备，Y轴展示0~24点的时间。<br>
一种颜色表示正常的录像时长，灰色表示关闭录像的时长。<br>
需求中的录像并非24小时监控录像。所有会有这种展示录像时间的需求，单录像的时间点各个设备不可预知，所以需要无序的往柱状图上堆叠。</p>
<p>目前想到的办法是主动生成有空数据的series元素。 echarts中遇到空数据的柱子会自动隐藏。在主动定义tooltip的函数隐藏掉数据为零的文字。<br>
效果如图：<br>
<img src="https://zhusi94.github.io/post-images/1600760184130.png" alt="" loading="lazy"><br>
代码如下：</p>
<pre><code class="language-js">var sourceData = {
	'摄像机一': ['08:00-12:00', '13:00-17:00'],
	'摄像机二': ['08:00-9:00', '10:00-11:00', '13:00-17:00'],
	'摄像机三': ['07:00-19:00'],
	'摄像机四': ['08:00-08:30', '09:00-09:30', '10:00-10:30'],
	'摄像机五': ['00:00-05:00', '12:00-17:00']
}
function getInvalidTime (sourceData) {
	var newObj = {};
	for(let key in sourceData) {
		let newTimeAry = [];
		// 补零
		if(sourceData[key].length &amp;&amp; sourceData[key][0].indexOf('00:00') == -1) {
			newTimeAry.push('00:00-' + sourceData[key][0].split('-')[0])
		}

		for(let i = 1; i &lt; sourceData[key].length; i++) {
			let start = sourceData[key][i].split('-')[0];
			// var end = sourceData[key][i].split('-')[1];
			let newstr = sourceData[key][i - 1].split('-')[1]+ '-' + start;
			newTimeAry.push(newstr);
		}
		//补24点
		if(newTimeAry[newTimeAry.length - 1].split('-')[1] != '24:00' &amp;&amp; sourceData[key][sourceData[key].length - 1].split('-')[1] != '24:00') {
			// 判断最晚时间
			let sourceend = sourceData[key][sourceData[key].length - 1].split('-')[1];
			let newend = newTimeAry[newTimeAry.length - 1].split('-')[1];
			if(new Date('2020 ' + sourceend).getTime() &lt; new Date('2020 ' + newend).getTime()){
				newTimeAry.push(newTimeAry[newTimeAry.length - 1].split('-')[1] + '-24:00')
			} else {
				newTimeAry.push(sourceData[key][sourceData[key].length - 1].split('-')[1] + '-24:00')
			}
		}
		newObj[key] = newTimeAry;
	}
	return newObj;
}

var invalidTime = getInvalidTime(sourceData);

function dateToNum (str) {
	var timesAry = str.split('-')
	var startTime = new Date('2020 ' + timesAry[0]);
	var endTime = new Date('2020 ' + timesAry[1]);
	var differ = endTime.getTime() - startTime.getTime();
    var hours=(differ/(3600*1000)).toFixed(2)//计算出小时数
    return hours;
}

function getseries (sourceData,invalidData) {
	let newseries = [];
	let keylength = Object.keys(sourceData).length;
	let keyindex = 0;
	for(let key in sourceData) {
		if(sourceData[key].length || invalidData[key].length) {
			if(invalidData[key][0].split('-')[0] == '00:00'){
				for(let i = 0; i &lt; invalidData[key].length; i++) {
					let obj1 = {
						name: '无录制',
			            type: 'bar',
			            stack: key,
			            itemStyle: {
			                color: 'rgba(220, 220, 220, 0.8)'
			            },
			            data: []
					}
					obj1.data = new Array(keylength).fill(0);
					obj1.data[keyindex] = dateToNum(invalidData[key][i]);
					newseries.push(obj1);
					if(sourceData[key][i]) {
						let obj2 = {
							name: '正常录制',
				            type: 'bar',
				            stack: key,
				            itemStyle: {
				                color: 'rgb(194,54,52)'
				            },
				            data: []
						}
						obj2.data = new Array(keylength).fill(0);
						obj2.data[keyindex] = dateToNum(sourceData[key][i]);
						newseries.push(obj2);
					}
					if(i == invalidData[key].length &amp;&amp; i &lt; sourceData[key].length) {
						for(let j = i + 1; j &lt; sourceData[key].length; j++) {
							let obj3 = {
								name: '正常录制',
					            type: 'bar',
					            stack: key,
					            itemStyle: {
					                color: 'rgb(194,54,52)'
					            },
					            data: []
							}
							obj3.data = new Array(keylength).fill(0);
							obj3.data[keyindex] = dateToNum(sourceData[key][i]);
							newseries.push(obj3);
						}
					}
				}
			}

			if(sourceData[key][0].split('-')[0] == '00:00') {
				for(let i = 0; i &lt; sourceData[key].length; i++) {
					let obj1 = {
						name: '正常录制',
			            type: 'bar',
			            stack: key,
			            itemStyle: {
			                color: 'rgb(194,54,52)'
			            },
			            data: []
					}
					obj1.data = new Array(keylength).fill(0);
					obj1.data[keyindex] = dateToNum(sourceData[key][i]);
					newseries.push(obj1);
					if(invalidData[key][i]) {
						let obj2 = {
							name: '无录制',
				            type: 'bar',
				            stack: key,
				            itemStyle: {
				                color: 'rgba(220, 220, 220, 0.8)'
				            },
				            data: []
						}
						obj2.data = new Array(keylength).fill(0);
						obj2.data[keyindex] = dateToNum(invalidData[key][i]);
						newseries.push(obj2);
					}
					if(i == sourceData[key].length &amp;&amp; i &lt; invalidData[key].length) {
						for(let j = i + 1; j &lt; invalidData[key].length; j++) {
							let obj3 = {
								name: '无录制',
					            type: 'bar',
					            stack: key,
					            itemStyle: {
					                color: 'rgba(220, 220, 220, 0.8)'
					            },
					            data: []
							}
							obj3.data = new Array(keylength).fill(0);
							obj3.data[keyindex] = dateToNum(invalidData[key][i]);
							newseries.push(obj3);
						}
					}
				}
			}


		}
		keyindex++;
	}
	return	newseries;
}

var option = {
    tooltip: {
        trigger: 'axis',
        axisPointer: {            // 坐标轴指示器，坐标轴触发有效
            type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
        }
    },
    legend: {
        data: ['正常录制', '无录制'],
        selectedMode: false
    },
    grid: {
        left: '3%',
        right: '4%',
        bottom: '3%',
        containLabel: true
    },
    yAxis: {
        type: 'value'
    },
    xAxis: {
        type: 'category',
        data: ['摄像机一', '摄像机二', '摄像机三', '摄像机四', '摄像机五']
    },
    series: getseries(sourceData, invalidTime)
};

</code></pre>
<p>可直接在<a href="https://gallery.echartsjs.com/editor.html?c=xwQMgX6NpR&amp;v=1">示例中心</a>，查看预览效果。</p>
<p>编辑tooltip函数的代码已省略， 请自行编辑</p>
<p>不过， 该方法有个隐患是当数据量大的时候会生成大量series造成卡顿。<br>
如有其他更好可以实现类似需求。欢迎联系我。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇文章]]></title>
        <id>https://zhusi94.github.io/post/di-yi-pian-wen-zhang/</id>
        <link href="https://zhusi94.github.io/post/di-yi-pian-wen-zhang/">
        </link>
        <updated>2020-09-01T01:44:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="也不知道要写点什么">也不知道要写点什么。</h1>
<p>本人从转行前端以来已经工作一年有余，一直没有写过博客，希望从今天开<br>
始用博客记录一下工作和业务上的技术问题，以激励自己成长。<br>
一年多以来主要接触过web端前端开发，前端框架为Vue，Jquery；UI库是公司自己基于element封装后的库，以及Layui。<br>
还接触过一些地图方面的业务开发，百度地图api，argis，也还算比较熟悉。<br>
最近也做了基于360°摄像机的全景展示，用的krpano工具，会在以后的博客中做具体介绍。</p>
<p>以上。</p>
<p>请多指教。</p>
]]></content>
    </entry>
</feed>